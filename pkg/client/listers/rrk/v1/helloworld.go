/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1

import (
	v1 "github.com/rrk-dev/hw-client/pkg/apis/rrk/v1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// HelloWorldLister helps list HelloWorlds.
// All objects returned here must be treated as read-only.
type HelloWorldLister interface {
	// List lists all HelloWorlds in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1.HelloWorld, err error)
	// HelloWorlds returns an object that can list and get HelloWorlds.
	HelloWorlds(namespace string) HelloWorldNamespaceLister
	HelloWorldListerExpansion
}

// helloWorldLister implements the HelloWorldLister interface.
type helloWorldLister struct {
	indexer cache.Indexer
}

// NewHelloWorldLister returns a new HelloWorldLister.
func NewHelloWorldLister(indexer cache.Indexer) HelloWorldLister {
	return &helloWorldLister{indexer: indexer}
}

// List lists all HelloWorlds in the indexer.
func (s *helloWorldLister) List(selector labels.Selector) (ret []*v1.HelloWorld, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.HelloWorld))
	})
	return ret, err
}

// HelloWorlds returns an object that can list and get HelloWorlds.
func (s *helloWorldLister) HelloWorlds(namespace string) HelloWorldNamespaceLister {
	return helloWorldNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// HelloWorldNamespaceLister helps list and get HelloWorlds.
// All objects returned here must be treated as read-only.
type HelloWorldNamespaceLister interface {
	// List lists all HelloWorlds in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1.HelloWorld, err error)
	// Get retrieves the HelloWorld from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1.HelloWorld, error)
	HelloWorldNamespaceListerExpansion
}

// helloWorldNamespaceLister implements the HelloWorldNamespaceLister
// interface.
type helloWorldNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all HelloWorlds in the indexer for a given namespace.
func (s helloWorldNamespaceLister) List(selector labels.Selector) (ret []*v1.HelloWorld, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.HelloWorld))
	})
	return ret, err
}

// Get retrieves the HelloWorld from the indexer for a given namespace and name.
func (s helloWorldNamespaceLister) Get(name string) (*v1.HelloWorld, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1.Resource("helloworld"), name)
	}
	return obj.(*v1.HelloWorld), nil
}
